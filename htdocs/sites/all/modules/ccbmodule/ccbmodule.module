<?php

/**
 * ccbmodule module
 *
 * This module defines all content types for this project
 * These nodes are used to create, edit and delete data for various content of this site.
 *
 * @version 0.1b
 */
include_once('ccbmodule_block_publish.php');
include_once('ccbmodule.model.php');
include_once('ccbmodule.helper.php');
global $base_url;
drupal_add_js("baseUrl = " . drupal_to_js($base_url) . ";", 'inline');
drupal_add_js(drupal_get_path('module', 'ccbmodule') . '/js/ccb.js');
define('FIRST_CLASS_MATCH', 'First class');
define('ODI', 'International');
define('T20', 'T20');
define('NOT_OUT', 52);
define('CAUGHT', 5);
define('STUMPPED', 6);
define('NOT_BATTED', 53);



/*
 * Implementation of hook_menu().
 */

function ccbmodule_menu() {
    global $user;

    $items = array(
        'node/%node/score' => array(
            'title' => 'Match score',
            'page callback' => '_ccbmodule_match_score',
            'page arguments' => array(1),
            'access callback' => '_ccbmodule_match_score_access',
            'access arguments' => array(1),
            'type' => MENU_CALLBACK,
        ),
        'node/%node/statistics' => array(
            'title' => 'Player statistics',
            'page callback' => '_ccbmodule_player_statistics',
            'page arguments' => array(1),
            'access callback' => '_ccbmodule_player_statistics_access',
            'access arguments' => array(1),
            'type' => MENU_CALLBACK,
        ),
        'ccb/statistics' => array(
            'title' => '',
            'page callback' => '_ccbmodule_statistics',
            'access callback' => '_ccbmodule_statistics_access',
            'type' => MENU_CALLBACK,
        ),
        'match/%node/auction' => array(
            'title' => '',
            'page callback' => '_ccbmodule_player_auction',
            'access callback' => '_ccbmodule_player_auction_access',
            'type' => MENU_CALLBACK,
        ),
        'ccb/players' => array(
            'title' => '',
            'page callback' => '_ccbmodule_team_players',
            'access callback' => '_ccbmodule_statistics_access',
            'type' => MENU_CALLBACK,
        ),
        'ccb/message' => array(
            'title' => '',
            'page callback' => '_ccbmodule_message',
            'access callback' => '_ccbmodule_statistics_access',
            'type' => MENU_CALLBACK,
        )
    );

    return $items;
}

/**
 * Implementation of hook_block().
 */
function ccbmodule_block($op = 'list', $delta = 0, $edit = array()) {
    if ($op == 'list') {
        $blocks[0] = array('info' => t('scrolling_news'),
            'weight' => -3, 'status' => 1, 'region' => 'scrolling_news');

        $blocks[1] = array('info' => t('Upcoming Matches'),
            'weight' => -5, 'status' => 1, 'region' => 'left_sidebar');

        $blocks[2] = array('info' => t('Recent Match Result'),
            'weight' => -1, 'status' => 1, 'region' => 'left_sidebar');

        $blocks[3] = array('info' => t('Top Batsman'),
            'weight' => -9, 'status' => 1, 'region' => 'right_sidebar');

        $blocks[4] = array('info' => t('Top Bowler'),
            'weight' => -2, 'status' => 1, 'region' => 'right_sidebar');

        $blocks[5] = array('info' => t('Recent Photo Gallery'),
            'weight' => -1, 'status' => 1, 'region' => 'recent_photos');


        return $blocks;
    } else if ($op == 'view') {
        $block['content'] = publish_block::get_instance()->theme_publish_block($delta);
        return $block;
    }
}

function ccbmodule_theme() {
    return array(
        'scrolling_news' => array(
            'template' => 'scrolling_news',
            'arguments' => array('date' => NULL, 'data' => new stdClass())
        ),
        'upcoming_matches' => array(
            'template' => 'upcoming_matches',
            'arguments' => array('date' => NULL, 'data' => array())
        ),
        'recent_match_result' => array(
            'template' => 'recent_match_result',
            'arguments' => array('date' => NULL, 'data' => array())
        ),
        'top_batsman' => array(
            'template' => 'top_batsman',
            'arguments' => array('date' => NULL, 'data' => array(), 'info' => new stdClass())
        ),
        'top_bowler' => array(
            'template' => 'top_bowler',
            'arguments' => array('date' => NULL, 'data' => array(), 'info' => new stdClass())
        ),
        'recent_photo_gallery' => array(
            'template' => 'recent_photo_gallery',
            'arguments' => array('date' => NULL, 'data' => array())
        ),
        'batting_score_table' => array(
            'arguments' => array(
                'batting_card' => NULL,
                'match' => NULL
            ),
            'template' => ' batting-score-table'
        ),
        'bowling_score_table' => array(
            'arguments' => array(
                'bowling_card' => NULL,
                'match' => NULL
            ),
            'template' => 'bowling-score-table',
        ),
        'match_details' => array(
            'arguments' => array(
                'match' => NULL
            ),
            'template' => 'match-details',
        ),
        'player_name' => array(
            'arguments' => array(
                'player_nid' => NULL,
                'linked' => true
            ),
        ),
        'dismissal' => array(
            'arguments' => array(
                'dismissal_type_nid' => NULL,
                'dismissed_by_nid' => NULL,
                'bowled_by_nid' => NULL,
            ),
        ),
        'dismissal_type' => array(
            'arguments' => array(
                'dismissal_type_nid' => NULL,
            ),
        ),
        'player_profile' => array(
            'template' => 'player_profile',
            'arguments' => array('date' => NULL, 'data' => new stdClass())
        ),
        'ccb_statistics' => array(
            'template' => 'ccb_statistics',
            'arguments' => array('date' => NULL, 'data' => new stdClass())
        ),
        'player_auction' => array(
            'template' => 'player_auction',
            'arguments' => array('date' => NULL, 'data' => new stdClass())
        ),
        'team_player_list' => array(
            'template' => 'team_player_list',
            'arguments' => array('date' => NULL, 'data' => array())
        ),
        'node_title' => array(
            'arguments' => array(
                'nid' => NULL,
                'linked' => true,
                'short_name' => false
            ),
        ),
        'team_role' => array(
            'arguments' => array(
                'team_role' => NULL,
            ),
        ),
    );
}

function theme_team_role($team_role) {
    $html = "";

    switch ($team_role) {
        case 2:
            $html = "Captain";
            break;
        case 1:
            $html = "Vice Captain";
            break;
        case 0:
            $html = "Team Manager";
            break;
    }
    return $html;
}

function theme_node_title($nid, $linked = true, $short_name = false, $options = array()) {
    $node = node_load(array('nid' => $nid));
    $title = $node->title;
    if($short_name){
        $title = $node->field_short_name[0]['value'];
    }
    

    
    if ($linked)
        return l($title, 'node/' . $nid, $options);

    return $title;
}

function _ccbmodule_match_score_access($node) {
    return true;
}

function _ccbmodule_player_statistics_access($node) {
    return true;
}

function _ccbmodule_statistics_access() {
    return true;
}

function _ccbmodule_player_auction_access() {
    return true;
}

function _ccbmodule_player_auction() {
    $objModel = new CCB_Model();
}

function _ccbmodule_message($arg) {
    switch ($arg) {
        case 1:
            return "<div class='messages status'>Maximum 16 players already registered. </div>";
            break;
        case 2:
            return "<div class='messages status'>You are not authorized to edit this content. ";
            break;
    }
}

function _ccbmodule_team_players($arg) {

    $teams = array();
    $objModel = new CCB_Model();
    $ts = $objModel->getTeamList();

    while ($team = db_fetch_object($ts)) {
        $teams[] = $team;
    }

    if (empty($arg)) {
        $team_id = $teams[0]->nid;
    } else {
        $team_id = (int) $arg;
    }
    $selected_team = node_load($team_id);
    $players = array();

    /*
      $team_captain_id = $objModel->getTeamRole($team_id, 0);
      if (isset($team_captain_id))
      $players[] = node_load($team_captain_id);

      $team_vice_captain_id = $objModel->getTeamRole($team_id, 1);
      if (isset($team_vice_captain_id))
      $players[] = node_load($team_vice_captain_id);

      $team_manager_id = $objModel->getTeamRole($team_id, 2);
      if (isset($team_manager_id))
      $players[] = node_load($team_manager_id);
     */
    $ps = $objModel->getyPlayerList($team_id);
    while ($player = db_fetch_object($ps)) {
        $players[] = node_load($player->nid);
    }
    //print_r($players);exit;
    return theme('team_player_list', null, array("teams" => $teams, "players" => $players, "team_name" => $selected_team->title));
}

function ccbmodule_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    if ($form_id == 'ccb_players_node_form') {
        $objModel = new CCB_Model();
        if ($form['#action'] == "/node/add/ccb-players") {
            $already_registered = $objModel->getPlayerCount($user->uid);
            if ($already_registered >= 17)
                drupal_goto("ccb/message/1");
        } else if (strpos($form['#action'], "edit") !== false) {

            $player_id = $form["nid"]['#value'];
            //echo $player_id;
            $team_manager_id = $objModel->getTeamManagerId($player_id);
            //echo $team_manager_id; exit;

            if ($user->uid > 1) {
                if ($team_manager_id != $user->uid) {
                    drupal_goto("ccb/message/2");
                }
            }
        }
        $team_id = $objModel->getTeamId($user->uid);

        $settings = array("team_id" => $team_id, "user_id" => $user->uid);
        drupal_add_js($settings, 'setting');
//        $form['#after_build'][] = '_ccbmodule_palyer_after_build';
    } else if ($form_id == 'bating_score_node_form') {
        /*
        if (isset($form['nid']['#value']) && !empty($form['nid']['#value'])) {
            //$match_node = node_load($form['#node']->field_bating_match[0]['nid']);
            $players_ids = explode(",", $form['#node']->field_batting_serial_id[0]['value']);
            $i = 1;
            foreach ($players_ids as $id) {
                $field_name = "field_bating_player$i";
                $form['#node']->{$field_name}[0]['nid'] = (int) trim($id);
                $i++;
            }
        }
        */
        $form['#after_build'][] = 'bating_score_node_form_after_build';
        //print_r($players_ids);exit;
    } else if ($form_id == 'ccb_bowling_card_node_form') {
        $form['#after_build'][] = 'bowling_score_node_form_after_build';
    } else if ($form_id ==  'ccb_match_node_form'){
        $form['#after_build'][] = 'match_node_form_after_build';
    }
}

function bating_score_node_form_after_build($form, &$form_state) {
    //print_r($form);
    //echo $form['field_bating_match'][0]['nid'];
    if (isset($form['#node']->field_bating_match[0]['nid']) && !empty($form['#node']->field_bating_match[0]['nid'])) {
        $match_id = $form['#node']->field_bating_match[0]['nid'];
        $match_node = node_load($match_id);

        $team1_nid = $match_node->field_match_team1[0]['nid'];
        $team2_nid = $match_node->field_match_team2[0]['nid'];

        $team1_node = node_load($team1_nid);
        $team2_node = node_load($team2_nid);

        $match_teams = array('' => '- None -', "$team1_nid" => $team1_node->title, "$team2_nid" => $team2_node->title);
        $form['field_bating_field']['nid']['nid']['#options'] = $match_teams;
    }

    if (isset($form['#node']->field_bating_field[0]['nid']) && !empty($form['#node']->field_bating_field[0]['nid'])) {
        $batting_team_id = $form['#node']->field_bating_field[0]['nid'];

        if ($batting_team_id != $team1_nid)
            $bowling_team_id = $team1_nid;

        if ($batting_team_id != $team2_nid)
            $bowling_team_id = $team2_nid;

        $sql = "SELECT nid, field_players_nick_value FROM content_type_ccb_players
            WHERE field_players_club_nid =%d ORDER BY field_players_nick_value ASC";

        $results = db_query($sql, $batting_team_id);

        $batting_players[] = '- None -';
        while ($row = db_fetch_object($results)) {
            $batting_players[$row->nid] = $row->field_players_nick_value;
        }
        
        $form['field_bating_player1']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player2']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player3']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player4']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player5']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player6']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player7']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player8']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player9']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player10']['nid']['nid']['#options'] = $batting_players;
        $form['field_bating_player11']['nid']['nid']['#options'] = $batting_players;


        $sql = "SELECT nid, field_players_nick_value FROM content_type_ccb_players 
            WHERE field_players_club_nid =%d ORDER BY field_players_nick_value ASC";

        $results = db_query($sql, $bowling_team_id);

        $fielding_players[] = '- None -';
        while ($row = db_fetch_object($results)) {
            $fielding_players[$row->nid] = $row->field_players_nick_value;
        }
        
        $form['field_bating_dismissed_by1']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by2']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by3']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by4']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by5']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by6']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by7']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by8']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by9']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by10']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_dismissed_by11']['nid']['nid']['#options'] = $fielding_players;
        
        $form['field_bating_bowled_by1']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by2']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by3']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by4']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by5']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by6']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by7']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by8']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by9']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by10']['nid']['nid']['#options'] = $fielding_players;
        $form['field_bating_bowled_by11']['nid']['nid']['#options'] = $fielding_players;
    }

    return $form;
}

function bowling_score_node_form_after_build($form, &$form_state){
    
      if (isset($form['#node']->field_bowling_match[0]['nid']) && !empty($form['#node']->field_bowling_match[0]['nid'])) {
        $match_id = $form['#node']->field_bowling_match[0]['nid'];
        $match_node = node_load($match_id);

        $team1_nid = $match_node->field_match_team1[0]['nid'];
        $team2_nid = $match_node->field_match_team2[0]['nid'];

        $team1_node = node_load($team1_nid);
        $team2_node = node_load($team2_nid);

        $match_teams = array('' => '- None -', "$team1_nid" => $team1_node->title, "$team2_nid" => $team2_node->title);
        $form['field_bowling_team']['nid']['nid']['#options'] = $match_teams;
    }
    
     if (isset($form['#node']->field_bowling_team[0]['nid']) && !empty($form['#node']->field_bowling_team[0]['nid'])) {
        $bowling_team_id = $form['#node']->field_bowling_team[0]['nid'];
        
         $sql = "SELECT nid, field_players_nick_value FROM content_type_ccb_players 
             WHERE field_players_club_nid =%d ORDER BY field_players_nick_value ASC";

        $results = db_query($sql, $bowling_team_id);

        $bowling_players[] = '- None -';
        while ($row = db_fetch_object($results)) {
            $bowling_players[$row->nid] = $row->field_players_nick_value;
        }
        $form['field_bowling_player1']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player2']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player3']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player4']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player5']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player6']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player7']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player8']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player9']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player10']['nid']['nid']['#options'] = $bowling_players;
        $form['field_bowling_player11']['nid']['nid']['#options'] = $bowling_players;
        
     }
    

    return $form;
}

function match_node_form_after_build($form, &$form_state){
    
      $players = array();
    
      if (isset($form['#node']->field_match_team1[0]['nid']) && !empty($form['#node']->field_match_team1[0]['nid']) &&
          isset($form['#node']->field_match_team2[0]['nid']) && !empty($form['#node']->field_match_team2[0]['nid']) ) {


        $team1_nid = $form['#node']->field_match_team1[0]['nid'];
        $team2_nid = $form['#node']->field_match_team2[0]['nid'];

        $team1_node = node_load($team1_nid);
        //print_r($team1_node);
        $team2_node = node_load($team2_nid);
        
         $sql = "SELECT nid, field_players_nick_value FROM content_type_ccb_players 
             WHERE field_players_club_nid =%d ORDER BY field_players_nick_value ASC";


        $results = db_query($sql, $team1_nid);

        $players[] = '- None -';
        while ($row = db_fetch_object($results)) {
            $players[$row->nid] = $row->field_players_nick_value . " [". $team1_node->field_short_name[0]['value'] ."]";
        }
        
        $sql = "SELECT nid, field_players_nick_value FROM content_type_ccb_players 
             WHERE field_players_club_nid =%d ORDER BY field_players_nick_value ASC";


        $results = db_query($sql, $team2_nid);


        while ($row = db_fetch_object($results)) {
            $players[$row->nid] = $row->field_players_nick_value . " [". $team2_node->field_short_name[0]['value'] ."]";
        }
        
        $form['field_man_of_the_match']['nid']['nid']['#options'] = $players;      
        
     }
    

    return $form;
}

function _check_registered_player_count() {
    $objModel = new CCB_Model();
}

function _ccbmodule_palyer_after_build(&$form, &$form_state) {
    /* $form_state['values']['field_players_club'][0]['nid'] = 277;
      $form_state['values']['field_players_club']['nid']['nid'] = 277;
      print_r($form);
      // $form['field_players_club']['#default_value'][0]['nid'] = "277";
      //$form['field_players_club']['#value'][0]['nid'] = "277";
      $form['field_players_club']['value']['#value'] = 277;
      //$form['field_players_nick']['value']['#value'] = 'momo';
      $form_state['values']['field_players_nick'][0]['value'] = 'momo';
      //$form_state['values']['field_players_nick'][0]
      //unset($form['field_players_club']);
      // */
    $objModel = new CCB_Model();
    $team_id = $objModel->getTeamId($user->uid);
    $form['field_players_club']['nid']['#default_value'][0]['nid'] = $team_id;
    // $form_state['field_players_club']['#default_value'][0]['nid'] = 275;
    // unset($form);
    //print_r($form);
    return $form;
}

function _ccbmodule_statistics($arg0) {


    $objModel = new CCB_Model();
    $seasonId = "";
    if(empty($arg0)){
        $seasonId = $objModel->getLatestTournament();
    } else {
        $seasonId = $arg0;
    }

    //$bowlling_statistics_first_class = $objModel->allPlayerBowlingRecord(FIRST_CLASS_MATCH);
    //$bating_statistics_first_class = $objModel->allPlayerBattingRecord(FIRST_CLASS_MATCH);
    //$bowlling_statistics_odi = $objModel->allPlayerBowlingRecord(ODI);
    //$bating_statistics_odi = $objModel->allPlayerBowlingRecord(ODI);

    $bowlling_statistics_t20 = $objModel->allPlayerBowlingRecord(T20, $seasonId);
    $bating_statistics_t20 = $objModel->allPlayerBattingRecord(T20, $seasonId);

    $data = new stdClass();

    //$data->bating_statistics_first_class = $bating_statistics_first_class;
    //$data->bowlling_statistics_first_class = $bowlling_statistics_first_class;
    // $data->bating_statistics_odi = $bating_statistics_odi;
    // $data->bowlling_statistics_odi = $bowlling_statistics_odi;

    $data->bating_statistics_t20 = $bating_statistics_t20;
    $data->bowlling_statistics_t20 = $bowlling_statistics_t20;
    $data->seasons = $objModel->getTournamentSession();
    return theme('ccb_statistics', NULL, $data);
}

function _ccbmodule_get_bat_first_team_nid($match) {
    if (isset($match->field_match_first_bat) && count($match->field_match_first_bat))
        return $match->field_match_first_bat[0]['nid'];

    return null;
}

function _ccbmodule_match_score($match) {
    //print_r($match);
    $bat_first_team_nid = _ccbmodule_get_bat_first_team_nid($match);

    $batting_card_nids = _ccbmodule_get_batting_cards($match->nid);
    $bowling_card_nids = _ccbmodule_get_bowling_cards($match->nid);

    $html_sections = array();

    $html_sections[-1] = theme('match_details', $match);

    //Batting innings html
    if (array_key_exists($bat_first_team_nid, $batting_card_nids)) {
        $html_sections[0] = theme('batting_score_table', node_load(array('nid' => $batting_card_nids[$bat_first_team_nid])), $match
        );
        unset($batting_card_nids[$bat_first_team_nid]);
    }

    $batting_innings_count = count($html_sections) ? 2 : 0;
    foreach ($batting_card_nids as $team_nid => $batting_card_nid) {
        $html_sections[$batting_innings_count] = theme('batting_score_table', node_load(array('nid' => $batting_card_nid)), $match
        );
        $batting_innings_count += 2;
    }

    //Bowling innings html
    if (array_key_exists($bat_first_team_nid, $bowling_card_nids)) {
        $html_sections[3] = theme('bowling_score_table', node_load(array('nid' => $bowling_card_nids[$bat_first_team_nid])), $match
        );
        unset($bowling_card_nids[$bat_first_team_nid]);
    }

    $bowling_innings_count = isset($html_sections[3]) ? 1 : 3;
    foreach ($bowling_card_nids as $team_nid => $bowling_card_nid) {
        $html_sections[$bowling_innings_count] = theme('bowling_score_table', node_load(array('nid' => $bowling_card_nid)), $match
        );
        $bowling_innings_count += 2;
    }

    ksort($html_sections);

    $html = '';
    foreach ($html_sections as $a_section)
        $html .= $a_section;

    return $html;
}

function _ccbmodule_player_statistics($player) {

    $objModel = new CCB_Model();
    //$bowlling_statistics_first_class = $objModel->singlePlayerBowlingRecord($player->nid, FIRST_CLASS_MATCH);
    //$bating_statistics_first_class = $objModel->singlePlayerBattingRecord($player->nid, FIRST_CLASS_MATCH);

    //$bowlling_statistics_odi = $objModel->singlePlayerBowlingRecord($player->nid, ODI);
    //$bating_statistics_odi = $objModel->singlePlayerBattingRecord($player->nid, ODI);
  //
  //
    $bowlling_statistics_t20 = $objModel->singlePlayerBowlingRecord($player->nid, T20);
    $bating_statistics_t20 = $objModel->singlePlayerBattingRecord($player->nid, T20);
    //print_r($bowlling_statistics_t20);
    // print_r($bating_statistics);
    $recent_matches_info = $objModel->getRecentMacthesInfo($player->nid);

    $obj = new stdClass();
    $obj->player_info = node_load($player->nid);
    /*
    $obj->bating_statistics_first_class = $bating_statistics_first_class;
    $obj->bowlling_statistics_first_class = $bowlling_statistics_first_class;
    $obj->bating_statistics_odi = $bating_statistics_odi;
    $obj->bowlling_statistics_odi = $bowlling_statistics_odi;
    */
    $obj->bating_statistics_t20 = $bating_statistics_t20;
    $obj->bowlling_statistics_t20 = $bowlling_statistics_t20;

    $obj->recent_matches_info = $recent_matches_info;


    return theme('player_profile', NULL, $obj);
}

function _ccbmodule_get_batting_cards($match_nid) {
    $query = <<<SQL
        SELECT field_bating_field_nid team_nid, nid batting_card_nid
        FROM {content_type_bating_score}
        WHERE field_bating_match_nid = %d
SQL;

    $res = db_query($query, $match_nid);

    $batting_cards = array();
    while ($row = db_fetch_array($res)) {
        $batting_cards[$row['team_nid']] = $row['batting_card_nid'];
    }

    return $batting_cards;
}

function _ccbmodule_get_bowling_cards($match_nid) {
    $query = <<<SQL
        SELECT field_bowling_team_nid team_nid, nid bowling_card_nid
        FROM {content_type_ccb_bowling_card}
        WHERE field_bowling_match_nid = %d
SQL;

    $res = db_query($query, $match_nid);

    $batting_cards = array();
    while ($row = db_fetch_array($res)) {
        $batting_cards[$row['team_nid']] = $row['bowling_card_nid'];
    }

    return $batting_cards;
}

function _ccbmodule_get_aliasable_content_types() {
    return array(
        'ccb_match' => array(
            'prefix' => 'match',
            'suffix' => array('score')
        ),
        'ccb_players' => array(
            'prefix' => 'player',
            'suffix' => array('statistics')
        )
    );
}

function ccbmodule_nodeapi(&$node, $op, $a3 = null, $a4 = null) {
    if ($op == 'insert' || $op == 'update')
        _ccbmodule_update_aliases($node, $aliasable_content_types[$node->type]);
}

function _ccbmodule_update_aliases($node, $delete = false) {
    $aliasable_content_types = _ccbmodule_get_aliasable_content_types();
    if (!array_key_exists($node->type, $aliasable_content_types))
        return;

    if (!$delete) {
        $alias = drupal_get_path_alias($path);
        if ($alias == $path) {
            $aliases = _ccbmodule_get_new_alias($node);
            foreach ($aliases as $path => $an_alias)
                path_set_alias($path, $an_alias);
            ;
        }

        return;
    }

    //deletes alias
    path_set_alias($path);
}

function _ccbmodule_get_node_count($node_type) {
    $query = <<<SQL
        SELECT
            max(nid)
        FROM {node} m
        WHERE m.type = '%s'
SQL;

    return db_result(db_query($query, $node_type));
}

function _ccbmodule_get_new_alias($node, $include_default_alias = true) {
    $aliasable_content_types = _ccbmodule_get_aliasable_content_types();
    if (!array_key_exists($node->type, $aliasable_content_types))
        return;

    //$total = _ccbmodule_get_node_count($node->type);
    $new_node_no = $node->nid; //++$total;

    $node_routes = $aliasable_content_types[$node->type];
    $prefix = $node_routes['prefix'];
    $routes = array();

    foreach ($node_routes['suffix'] as $a_suffix) {
        $routes['node/' . $node->nid . '/' . $a_suffix] = $prefix . '/' . $new_node_no . '/' . $a_suffix;
    }

    if ($include_default_alias)
        $routes['node/' . $node->nid] = $prefix . '/' . $new_node_no;

    return $routes;
}

function theme_player_name($player_uid, $linked = true, $options = array()) {
    $player = node_load(array('nid' => $player_uid));
    if ($linked)
        return l($player->title, 'node/' . $player_uid . '/statistics', $options);

    return $player->title;
}

function theme_dismissal_type($dismissal_type_nid) {
    if (!$dismissal_type_nid)
        return;

    $dismissal = node_load($dismissal_type_nid);

    $dismissal_type = Dismissal_type::getConst($dismissal->title);

    switch ($dismissal_type) {
        case Dismissal_type::DISMISSTAL_TYPE_RUN_OUT:
            return 'run out';
        case Dismissal_type::DISMISSTAL_TYPE_CAUGHT:
            return 'c';
        case Dismissal_type::DISMISSTAL_TYPE_STUMPED:
            return 'st';
        case Dismissal_type::DISMISSTAL_TYPE_HIT_WICKET:
            return 'hit wicket';
        case Dismissal_type::DISMISSTAL_TYPE_BOWLED:
            return 'b';
        case Dismissal_type::DISMISSTAL_TYPE_NOT_OUT:
            return 'not out';
        case Dismissal_type::DISMISSTAL_TYPE_DID_NOT_BAT;
            return 'did not bat';
        case Dismissal_type::DISMISSTAL_TYPE_CAUGHT_AND_BOWLED:
            return 'c & b';
        case Dismissal_type::DISMISSTAL_TYPE_LBW:
            return 'lbw';
        case Dismissal_type::DISMISSTAL_TYPE_RETIRED:
            return 'retired';
    }
}

function theme_dismissal($dismissal_type_nid, $dismissed_by_nid, $bowled_by_nid) {
    if (!$dismissal_type_nid)
        return;

    $dismissed_by = $dismissed_by_nid ? node_load($dismissed_by_nid) : '';
    $bowled_by = $bowled_by_nid ? node_load($bowled_by_nid) : '';

    $dismissal = node_load($dismissal_type_nid);

    $dismissal_type = Dismissal_type::getConst($dismissal->title);

    $dismissal_type_short = theme('dismissal_type', $dismissal_type_nid);

    switch ($dismissal_type) {
        case Dismissal_type::DISMISSTAL_TYPE_RUN_OUT:
            return $dismissal_type_short . (empty($dismissed_by->title) ? '' : ' (' . theme('player_name', $dismissed_by->nid) . ')');
        case Dismissal_type::DISMISSTAL_TYPE_CAUGHT:
        case Dismissal_type::DISMISSTAL_TYPE_STUMPED:
            return $dismissal_type_short . (empty($dismissed_by->title) ? '' : ' ' . theme('player_name', $dismissed_by->nid)) . ' b ' . theme('player_name', $bowled_by->nid);
        case Dismissal_type::DISMISSTAL_TYPE_HIT_WICKET:
            return $dismissal_type_short . ' b ' . theme('player_name', $bowled_by->nid);
        case Dismissal_type::DISMISSTAL_TYPE_BOWLED:
        case Dismissal_type::DISMISSTAL_TYPE_CAUGHT_AND_BOWLED:
        case Dismissal_type::DISMISSTAL_TYPE_LBW:
            return $dismissal_type_short . ' ' . theme('player_name', $bowled_by->nid);
        case Dismissal_type::DISMISSTAL_TYPE_NOT_OUT:
        case Dismissal_type::DISMISSTAL_TYPE_DID_NOT_BAT:
        case Dismissal_type::DISMISSTAL_TYPE_RETIRED:
            return $dismissal_type_short;
    }
}

function calculateAge($dob) {

    $date1 = new DateTime(date('Y-m-d'));
    $date2 = new DateTime($dob);
    $interval = $date1->diff($date2);

    if ($interval->y) {
        if ($interval->y > 1) {
            $years = $interval->y . ' years ';
        } else {
            $years = $interval->y . ' year ';
        }
    }

    if ($interval->m) {
        if ($interval->m > 1) {
            $months = $interval->m . ' months ';
        } else {
            $months = $interval->m . ' month ';
        }
    }

    if ($interval->d) {
        if ($interval->d > 1) {
            $days = $interval->d . ' days ';
        } else {
            $days = $interval->d . ' day ';
        }
    }

    //return $years.$months.$days;
    return $years . $months;
}